name: .NET

# Permissions for the workflow
permissions:
  contents: write
  checks: write
  pull-requests: write
  statuses: write

# Trigger workflow on push to the main branch
on:
  push:
    branches:
      - main

env:
  #
  # Build and release settings
  artifactStagingDirectory: ${{ github.workspace }}/artifact_staging
  artifactType: 'Production'
  binariesDirectory: ${{ github.workspace }}/binaries
  buildConfiguration: 'Release'
  buildPlatform: 'any cpu'
  solutionName: 'GithubActionTestsResult'
  sourceDirectory: ${{ github.workspace }}/src
  #
  # Publish settings
  nugetApiKey: ${{ secrets.NUGET_PUBLIC_KEY }}
  nugetPackageSource: ${{ vars.NUGET_PUBLIC_SOURCE }}
  #
  # Test settings
  testSettingsFileName: 'Default.runsettings'
  workers: '5'
    
jobs:
  new-version:
    name: New Version
    runs-on: ubuntu-latest

    outputs:
      buildVersion: ${{ steps.parse-version.outputs.version }}
      validVersion: ${{ steps.validate-version.outputs.valid }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Parse Build Version for GitHub Tag
      id: parse-version
      shell: pwsh
      run: echo "version=$(Get-Date -UFormat '%Y.%m.%d').${{ github.run_number }}" >> $env:GITHUB_OUTPUT

    - name: Validate Version ${{ steps.parse-version.outputs.version }}
      id: validate-version
      shell: pwsh
      run: |
        $version = "${{ steps.parse-version.outputs.version }}"
        echo "valid=$($version -match '^\d+(\.\d+){3}$')" >> $env:GITHUB_OUTPUT

  new-build:
    name: Build & Publish Version ${{ needs.new-version.outputs.buildVersion }}
    runs-on: windows-latest
    needs: new-version
    if: ${{ needs.new-version.result == 'success' && needs.new-version.outputs.validVersion == 'True' }}
    defaults:
      run:
        working-directory: ${{ env.sourceDirectory }}
        
    env:
      buildVersion: ${{ needs.new-version.outputs.buildVersion }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8

    - name: Restore Packages
      shell: pwsh
      run: dotnet restore

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Restore NuGet Packages
      run: nuget restore ${{ env.solutionName }}.sln

    - name: Build .NET Framework Solution
      shell: pwsh
      run: msbuild "${{ env.solutionName }}.sln" /t:Build /p:Configuration=${{ env.buildConfiguration }} /p:OutputPath="${{ env.binariesDirectory }}/build/"

  invoke-unit-tests:
    name: Invoke Unit Tests & Artifact Results
    runs-on: ubuntu-latest
    if: ${{ needs.new-build.result == 'success' }}
    needs: 
      - new-build
      - new-version
    defaults:
      run:
        working-directory: ${{ github.workspace }}

    env:
      buildVersion: ${{ needs.new-version.outputs.buildVersion }}
      projectName: 'UnitTestProject'
      projectType: 'csproj'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: List files in the repository
        run: ls -R

      - name: Set Test Settings
        id: test-settings
        shell: pwsh
        run: |
          Write-Host "Test Settings"

      - name: Invoke Unit Tests
        uses: g4-api/g4-github-actions/actions/test-dotnet-project@v1
        if: steps.test-settings.outcome == 'success'
        with:
          build-version: ${{ env.buildVersion }}
          project-name: ${{ env.projectName }}
          project-type: ${{ env.projectType }}
