name: .NET

# Permissions for the workflow
permissions:
  contents: write
  checks: write
  pull-requests: write
  statuses: write

# Trigger workflow on push to the main branch
on:
  push:
    branches:
      - main

env:
  #
  # Build and release settings
  artifactStagingDirectory: ${{ github.workspace }}/artifact_staging
  artifactType: 'Production'
  binariesDirectory: ${{ github.workspace }}/binaries
  buildConfiguration: 'Release'
  buildPlatform: 'any cpu'
  solutionName: 'GithubActionTestsResult'
  #
  # Publish settings
  nugetApiKey: ${{ secrets.NUGET_PUBLIC_KEY }}
  nugetPackageSource: ${{ vars.NUGET_PUBLIC_SOURCE }}
  #
  # Test settings
  testSettingsFileName: 'Default.runsettings'
  workers: '5'
    
jobs:
  new-version:
    name: New Version
    runs-on: ubuntu-latest

    outputs:
      buildVersion: ${{ steps.parse-version.outputs.version }}
      validVersion: ${{ steps.validate-version.outputs.valid }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Parse Build Version for GitHub Tag
      id: parse-version
      shell: pwsh
      run: echo "version=$(Get-Date -UFormat '%Y.%m.%d').${{ github.run_number }}" >> $env:GITHUB_OUTPUT

    - name: Validate Version ${{ steps.parse-version.outputs.version }}
      id: validate-version
      shell: pwsh
      run: |
        $version = "${{ steps.parse-version.outputs.version }}"
        echo "valid=$($version -match '^\d+(\.\d+){3}$')" >> $env:GITHUB_OUTPUT

  build:
    name: Build & Publish Version ${{ needs.new-version.outputs.buildVersion }}
    runs-on: windows-latest
    needs: new-version
    if: ${{ needs.new-version.result == 'success' && needs.new-version.outputs.validVersion == 'True' }}
    
    env:
      buildVersion: ${{ needs.new-version.outputs.buildVersion }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8

    - name: Restore Packages
      shell: pwsh
      run: dotnet restore

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Restore NuGet Packages
      run: nuget restore ./src/${{ env.solutionName }}.sln

    - name: Build .NET Framework Solution
      shell: pwsh
      run: msbuild "${{ env.solutionName }}.sln" /t:Build /p:Configuration=${{ env.buildConfiguration }} /p:OutputPath="${{ env.binariesDirectory }}/build/"

  test:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ needs.build.result == 'success' }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore Dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore

    - name: MS Test
      run: dotnet test -l:trx;LogFileName=TestOutput.xml --no-build --verbosity normal
      working-directory: src/UnitTestProject

    # - name: Publish Test Results
    #   uses: EnricoMi/publish-unit-test-result-action@v2
    #   if: always()      
    #   with:
    #     files: |
    #       src/UnitTestProject/TestResults/*.trx
    #       # test-results/**/*.xml
    #       # test-results/**/*.trx
    #       # test-results/**/*.json
  
